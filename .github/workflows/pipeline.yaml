name: Build and Deploy WebApp

env:
  DOTNET_VERSION: '6'
  WEBAPP_NAME: bloodpressurecalculator
  AZURE_WEBAPP_PACKAGE_PATH: '.' 
  AZURE_WEBAPP_STAGING_SLOT: 'STAGING'

on:
  push:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: Test
        run: dotnet test BPCalculator.sln --filter "FullyQualifiedName~UnitTests|FullyQualifiedName~BDD" --logger trx --results-directory "TestResults"

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
            name: dotnet-results
            path: TestResults
          # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp
        working-directory: ./
        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WEBAPP_NAME }}
          path: ${{ env.DOTNET_ROOT }}/myapp

  Integration:
    runs-on: ubuntu-latest
    needs: Build
    environment:
      name: Integration
    env:
      K6_BROWSER_ENABLED: true  

    steps:
      - name: Download artifact for deployment
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WEBAPP_NAME }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          slot-name: ${{ env.AZURE_WEBAPP_STAGING_SLOT }}

      - name: Download K6 test file
        run: |
          mkdir k6_scripts
          wget -O k6_scripts/performance.js https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/.github/k6/performance.js

      - name: Pull Docker image for k6
        run: docker pull grafana/k6

      - name: Run k6 load test, capture report
        run: docker run -i grafana/k6 run - <k6_scripts/performance.js > k6report.txt

      - name: Upload K6 Report
        uses: actions/upload-artifact@v3
        with:
          name: k6report
          path: k6report.txt
        if: always()

      - name: Pull Docker image for ZAP
        run: docker pull owasp/zap2docker-weekly

      - name: Run baseline scan
        run: docker run -v /report:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t ${{ secrets.AZURE_APP_SERVICE_STAGING_URL }} -I -r zapreport.html
  
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: ZAPreport
          path: /report/zapreport.html
        if: always()

  End_to_End:
    runs-on: ubuntu-latest
    needs: Integration
    environment:
      name: Integration
    container:
      image: mcr.microsoft.com/playwright/dotnet:v1.40.0-jammy
    steps:
          - uses: actions/checkout@v3
  
          - name: Install Azure CLI
            run: |
              curl -sL https://aka.ms/InstallAzureCLIDeb | bash
          
          - name: Set up .NET Core
            uses: actions/setup-dotnet@v3
            with:
              dotnet-version: ${{ env.DOTNET_VERSION }}

          - name: Build EndToEndTests project
            run: dotnet build EndToEndTests/EndToEndTests.csproj --configuration Release

          - name: Update Playwright Settings File
            env:
              AZURE_APP_SERVICE_STAGING_URL: ${{ secrets.AZURE_APP_SERVICE_STAGING_URL }}
            run: |
              sed -i 's|"BaseUrl": "http://localhost:5000/"|"BaseUrl": "'"$AZURE_APP_SERVICE_STAGING_URL"'"|g' EndToEndTests/playwrightSettings.json

          - name: Run Playwright E2E Tests
            run: |
              dotnet test EndToEndTests/EndToEndTests.csproj
            env:
                HOME: /root

          - name: Update Traffic Routing 50%
            run: |
              az login --service-principal -u ${{ secrets.AZURE_SERVICE_PRINCIPAL }} -p ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}
              az webapp traffic-routing set -g ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }}  --distribution STAGING=50 --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          - name: Sleep for 30 seconds
            run: sleep 30s
            shell: bash

          - name: Check Application Insights for Recent Failures
            id: check-recent-failures
            run: |
                failures=$(az monitor app-insights query --app ${{ secrets.APPLICATION_INSIGHTS_STAGING_ID }} --analytics-query "exceptions | where timestamp >= ago(1m) | count")
                echo "::set-output name=failures::$failures"

          - name: Rollback to 0% if Recent Failures Detected
            if: ${{ steps.check-recent-failures.outputs.failures != '0' }}
            run: |
                az login --service-principal -u ${{ secrets.AZURE_SERVICE_PRINCIPAL }} -p ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}
                az webapp traffic-routing set -g ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }} --distribution STAGING=0 --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                exit 1  # Explicitly exit with a failure status code

          - name: Update Traffic Routing 100%
            run: |
              az login --service-principal -u ${{ secrets.AZURE_SERVICE_PRINCIPAL }} -p ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}
              az webapp traffic-routing set -g ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }}  --distribution STAGING=100 --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          - name: Swap Azure Web App Slots
            run: |
              az login --service-principal -u ${{ secrets.AZURE_SERVICE_PRINCIPAL }} -p ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} --tenant ${{ secrets.AZURE_TENANT_ID }}
              az webapp deployment slot swap --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_WEBAPP_NAME }} --slot STAGING --target-slot production --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  Production:
    runs-on: ubuntu-latest
    needs: End_to_End
    environment:
      name: Production

    steps:
      - name: Download artifact for deployment
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WEBAPP_NAME }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          slot-name: ${{ env.AZURE_WEBAPP_STAGING_SLOT }}
          